openapi: 3.0.1
info:
  title: Serverless Image Processing API
  description: API documentation for Azure Functions serverless image processing app.
  version: "1.5"

servers:
  - url: https://cst8922finalfunctionapp.azurewebsites.net/api
    description: Azure Function 8922App
  - url: https://cst8922finaltest.azurewebsites.net/api
    description: Azure Function 8922App test  
  - url: https://super-duper-capybara-977jw9q7q79h76wr-7071.app.github.dev/api
    description: GitHub Codespaces Local Environment

tags:
  - name: User
    description: Operations related to user management
  - name: Admin
    description: Operations related to admin user management
  - name: Telemetry
    description: Operations related to telemetry data
  - name: Device
    description: Operations related to device management
  - name: Authentication
    description: Operations related to user authentication
  - name: Conditions
    description: Operations related to condition management

paths:
  /ping:
    get:
      summary: Health Check
      tags:
        - General
      responses:
        '200':
          description: Server is running

  /user/login:
    post:
      summary: User login
      tags:
        - Authentication
      description: Authenticate a user and return a new JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address
                password:
                  type: string
                  description: User's password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: Missing required fields or invalid data
        '401':
          description: Invalid email or password
        '404':
          description: User not found
        '500':
          description: Failed to update user token

  /user:
    post:
      summary: Create a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                address:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                emergency_contact:
                  type: string
                password:
                  type: string
              required:
                - username
                - name
                - surname
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: Missing required fields

    get:
      summary: Get user details
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: User not found

    put:
      summary: Update user information
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                address:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                  description: Optional phone number
                emergencyContact:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '400':
          description: No update data provided
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: User not found

    patch:
      summary: Update user password
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address
                oldPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - email
                - oldPassword
                - newPassword
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Missing required fields
        '401':
          description: Old password does not match
        '404':
          description: User not found

    delete:
      summary: Delete a user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: User not deleted
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: User not found

  /device:
    post:
      summary: Register a new device
      tags:
        - Device
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  description: Unique identifier for the device
                deviceName:
                  type: string
                  description: Name of the device
                sensorType:
                  type: string
                  description: Type of sensor (e.g., Temperature, Humidity)
                location:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the location
                    longitude:
                      type: string
                      description: Longitude of the location
                    latitude:
                      type: string
                      description: Latitude of the location
                status:
                  type: array
                  items:
                    type: object
                    properties:
                      valueType:
                        type: string
                        description: Type of the status (e.g., BatteryLevel, Active)
                      value:
                        type: integer
                        description: Status value (e.g., 85, on)
              required:
                - deviceId
                - deviceName
                - sensorType
                - location
      responses:
        '201':
          description: Device registered successfully
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: User not found
        '409':
          description: Device already exists in IoT Hub
        '500':
          description: Failed to register device in IoT Hub

    put:
      summary: Update a device for the authenticated user
      tags:
        - Device
      security:
        - bearerAuth: []
      parameters:
        - name: deviceId
          in: query
          description: Unique identifier for the device to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Fields to update
              properties:
                deviceName:
                  type: string
                  description: Updated name of the device
                sensorType:
                  type: string
                  description: Updated type of sensor
                location:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Updated name of the location
                    longitude:
                      type: string
                      description: Updated longitude of the location
                    latitude:
                      type: string
                      description: Updated latitude of the location
                status:
                  type: array
                  items:
                    type: object
                    properties:
                      valueType:
                        type: string
                        description: Type of the status (e.g., BatteryLevel, Active)
                      value:
                        type: string
                        description: Status value (e.g., 85, on)
              required:
                - deviceName
      responses:
        '200':
          description: Device updated successfully
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: Device not found

    delete:
      summary: Delete a device for the authenticated user
      tags:
        - Device      
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  description: Unique identifier for the device
              required:
                - deviceId
      responses:
        '200':
          description: Device deleted successfully
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: Device not found
        '500':
          description: Failed to delete device from IoT Hub

  /devices:
    get:
      summary: Get devices or a specific device for the authenticated user
      tags:
        - Device
      description: Retrieve a list of devices or a specific device for the authenticated user. Supports filtering by device details and telemetry data.
      security:
        - bearerAuth: []
      parameters:
        - name: deviceId
          in: query
          description: Filter by device ID. If provided, only the specific device will be returned.
          required: false
          schema:
            type: string
        - name: deviceName
          in: query
          description: Filter by device name
          required: false
          schema:
            type: string
        - name: sensorType
          in: query
          description: Filter telemetry data by sensor type (e.g., temperature, humidity)
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: Filter telemetry data by sensor type (e.g., temperature, humidity)
          required: false
          schema:
            type: string

      responses:
        '200':
          description: List of devices or a specific device retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      type: object
                      properties:
                        deviceId:
                          type: string
                        deviceName:
                          type: string
                        telemetryData:
                          type: array
                          items:
                            type: object
                            properties:
                              eventId:
                                type: string
                              event_date:
                                type: string
                                format: date-time
                              values:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    valueType:
                                      type: string
                                    value:
                                      type: number
                  - type: object
                    properties:
                      deviceId:
                        type: string
                      deviceName:
                        type: string
                      telemetryData:
                        type: array
                        items:
                          type: object
                          properties:
                            eventId:
                              type: string
                            event_date:
                              type: string
                              format: date-time
                            values:
                              type: array
                              items:
                                type: object
                                properties:
                                  valueType:
                                    type: string
                                  value:
                                    type: number
        '401':
          description: Unauthorized (missing or invalid token)
        '404':
          description: Device not found
        '500':
          description: Internal server error

  /telemetry:
    post:
      summary: Add telemetry data
      tags:
        - Telemetry
      description: Add telemetry data for a specific device. This endpoint allows uploading an image along with telemetry data.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  description: Unique identifier for the device
                values:
                  type: array
                  description: List of telemetry values
                  items:
                    type: object
                    properties:
                      valueType:
                        type: string
                        description: Type of the value (e.g., Temperature, Humidity)
                      value:
                        type: number
                        description: Value of the telemetry data
                      longitude:
                        type: string
                        description: Longitude of the location
                      latitude:
                        type: string
                        description: Latitude of the location  
                image:
                  type: string
                  format: binary
                  description: Image file to upload (optional)
              required:
                - values
      responses:
        '201':
          description: Telemetry data added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        '400':
          description: Missing required fields or invalid data
        '404':
          description: Device not found in CosmosDB
        '500':
          description: Failed to process telemetry data

    get:
      summary: Get telemetry data
      tags:
        - Telemetry
      description: Retrieve telemetry data for the authenticated user's devices.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: query
          schema:
            type: string
          description: Unique identifier for the telemetry event
        - name: deviceId
          in: query
          schema:
            type: string
          description: Unique identifier for the device
        - name: sensorType
          in: query
          schema:
            type: string
          description: Type of sensor (e.g., Temperature, Humidity)
        - name: eventDate
          in: query
          schema:
            type: string
            format: date-time
          description: Specific date of the telemetry event
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
          description: Start date for the telemetry data range
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
          description: End date for the telemetry data range
        - name: values
          in: query
          schema:
            type: array
            items:
              type: object
              properties:
                valueType:
                  type: string
                  description: Type of the value (e.g., Temperature, Humidity)
                minValue:
                  type: number
                  description: Minimum value for the range
                maxValue:
                  type: number
                  description: Maximum value for the range
          description: Filters for telemetry values
      responses:
        '200':
          description: Telemetry data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Telemetry'
        '400':
          description: Invalid query parameters
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: No telemetry data found

    delete:
      summary: Delete telemetry data
      tags:
        - Telemetry      
      description: Delete telemetry data for a specific event. Only the authenticated user's data can be deleted.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  description: Unique identifier for the telemetry event
              required:
                - eventId
      responses:
        '200':
          description: Telemetry data deleted successfully
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: Telemetry data not found or access denied

  /conditions:
    get:
      summary: Get conditions
      tags:
        - Conditions
      description: Retrieve conditions for the authenticated user. Optionally filter by `deviceId`.
      security:
        - bearerAuth: []
      parameters:
        - name: deviceId
          in: query
          description: Filter conditions by device ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of conditions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    conditionId:
                      type: string
                    userId:
                      type: string
                    deviceId:
                      type: string
                    valueType:
                      type: string
                    minValue:
                      type: number
                    maxValue:
                      type: number
                    exactValue:
                      type: number
                    unit:
                      type: string
                    scope:
                      type: string
                      enum:
                        - general
                        - user
                        - device
                    notificationMethods:
                      type: array
                      items:
                        type: string
                        enum:
                          - Log
                          - Notification
                          - Email
                          - SMS

        '401':
          description: Unauthorized (JWT token missing or invalid)

    post:
      summary: Create one or multiple conditions
      tags:
        - Conditions
      description: >
        Create one or multiple conditions for the authenticated user. If `deviceId` is provided, it will be validated against the user's devices.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    deviceId:
                      type: string
                      description: ID of the device associated with the condition (optional)
                    valueType:
                      type: string
                      description: Type of the value (e.g., temperature, light)
                    minValue:
                      type: number
                      description: Minimum value for the condition (optional)
                    maxValue:
                      type: number
                      description: Maximum value for the condition (optional)
                    exactValue:
                      type: number
                      description: Exact value for the condition (optional)
                    unit:
                      type: string
                      description: Unit of the value (e.g., Celsius, Lux) (optional)
                    scope:
                      type: string
                      enum:
                        - general
                        - user
                        - device
                      description: Scope of the condition (either `general` or `user` or `device`)
                    notificationMethods:
                      type: array
                      items:
                        type: string
                        enum:
                          - Log
                          - Notification
                          - Email
                          - SMS

                      description: List of notification methods to use when the condition is met
                  required:
                    - valueType
                - type: array
                  items:
                    type: object
                    properties:
                      deviceId:
                        type: string
                        description: ID of the device associated with the condition (optional)
                      valueType:
                        type: string
                        description: Type of the value (e.g., temperature, light)
                      minValue:
                        type: number
                        description: Minimum value for the condition (optional)
                      maxValue:
                        type: number
                        description: Maximum value for the condition (optional)
                      exactValue:
                        type: number
                        description: Exact value for the condition (optional)
                      unit:
                        type: string
                        description: Unit of the value (e.g., Celsius, Lux) (optional)
                      scope:
                        type: string
                        enum:
                          - general
                          - user
                          - device
                        description: Scope of the condition (either `general` or `user` or `device`)
                      notificationMethods:
                        type: array
                        items:
                          type: string
                          enum:
                              - Log
                              - Notification
                              - Email
                              - SMS
                        description: List of notification methods to use when the condition is met
                    required:
                      - valueType
      responses:
        '201':
          description: Conditions created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_conditions:
                    type: array
                    items:
                      type: object
                      properties:
                        conditionId:
                          type: string
                        userId:
                          type: string
                        deviceId:
                          type: string
                        valueType:
                          type: string
                        minValue:
                          type: number
                        maxValue:
                          type: number
                        exactValue:
                          type: number
                        unit:
                          type: string
                        scope:
                          type: string
                          enum:
                            - general
                            - user
                            - device
                        notificationMethods:
                          type: array
                          items:
                            type: string
                            enum:
                              - Log
                              - Notification
                              - Email
                              - SMS
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        error:
                          type: string
                        condition:
                          type: object
        '400':
          description: Invalid request body or validation errors
        '401':
          description: Unauthorized (JWT token missing or invalid)

    put:
      summary: Update a condition
      tags:
        - Conditions
      description: Update an existing condition for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conditionId:
                  type: string
                  description: ID of the condition to update
                valueType:
                  type: string
                  description: Updated type of the value (optional)
                minValue:
                  type: number
                  description: Updated minimum value for the condition (optional)
                maxValue:
                  type: number
                  description: Updated maximum value for the condition (optional)
                exactValue:
                  type: number
                  description: Updated exact value for the condition (optional)
                unit:
                  type: string
                  description: Updated unit of the value (optional)
              required:
                - conditionId
      responses:
        '200':
          description: Condition updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing required fields or validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: Condition not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    delete:
      summary: Delete a condition
      tags:
        - Conditions
      description: Delete a condition for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conditionId:
                  type: string
                  description: ID of the condition to delete
              required:
                - conditionId
      responses:
        '200':
          description: Condition deleted successfully
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '404':
          description: Condition not found

  /alertlogs:
    get:
      summary: Get Alert Logs
      tags:
        - AlertLogs
      description: Retrieve alert logs for the authenticated user. Optionally filter by `deviceId`.
      security:
        - bearerAuth: []
      parameters:
        - name: deviceId
          in: query
          required: false
          schema:
            type: string
          description: Filter alert logs by device ID.
      responses:
        '200':
          description: List of alert logs retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertLog'
        '401':
          description: Unauthorized (JWT token missing or invalid).
        '500':
          description: Internal server error.

    delete:
      summary: Delete an Alert Log
      tags:
        - AlertLogs
      description: Delete an alert log for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alertLogId:
                  type: string
                  description: ID of the alert log to delete.
              required:
                - alertLogId
      responses:
        '200':
          description: Alert log deleted successfully.
        '400':
          description: Missing required fields or invalid request body.
        '401':
          description: Unauthorized (JWT token missing or invalid).
        '404':
          description: Alert log not found.
        '500':
          description: Internal server error.

  /manage/users:
    get:
      summary: Get all users (Admin only)
      tags:
        - Admin
      description: Retrieve a list of all users. Only accessible by admin users. Supports filtering by user details, device details, and telemetry data.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by user's userId
          required: false
          schema:
            type: string
        - name: username
          in: query
          description: Filter by user's username
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Filter by user's email
          required: false
          schema:
            type: string
        - name: phone
          in: query
          description: Filter by user's phone number
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    userId:
                      type: string
                    username:
                      type: string
                    name:
                      type: string
                    surname:
                      type: string
                    email:
                      type: string
                    phone:
                      type: string
                    Devices:
                      type: array
                      items:
                        type: object
                        properties:
                          deviceId:
                            type: string
                          deviceName:
                            type: string
                          telemetryData:
                            type: array
                            items:
                              type: object
                              properties:
                                eventId:
                                  type: string
                                event_date:
                                  type: string
                                  format: date-time
                                values:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      valueType:
                                        type: string
                                      value:
                                        type: number
                            status:
                              type: array
                              items:
                                type: object
                                properties:
                                  valueType:
                                    type: string
                                  value:
                                    type: string            
                    type:
                      type: string
        '401':
          description: Unauthorized (missing or invalid token)
        '403':
          description: Forbidden (only admins can access this endpoint)
        '500':
          description: Internal server error

  /manage/change-user-type:
    put:
      summary: Change user type
      tags:
        - Admin
      security:
        - bearerAuth: []
      description: Allows an admin to change the type of a user (e.g., from "user" to "admin" or vice versa).
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: ID of the user whose type is to be changed
        - name: userType
          in: query
          required: true
          schema:
            type: string
            enum:
              - user
              - admin
          description: New type for the user (e.g., "admin" or "user")
      responses:
        '200':
          description: User type updated successfully
        '400':
          description: Missing or invalid fields
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '403':
          description: Access denied (only admins can perform this action)
        '404':
          description: User not found
        '500':
          description: Internal server error

  /manage/create-admin:
    post:
      summary: Create a new admin user
      tags:
        - Admin
      description: Create a new admin user with elevated privileges.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                password:
                  type: string
                address:
                  type: string
                emergencyContact:
                  type: string
                  description: Optional emergency contact number    
              required:
                - username
                - name
                - surname
                - email
                - password
      responses:
        '201':
          description: Admin user created successfully
        '400':
          description: Missing required fields
        '500':
          description: Internal server error

  /manage/processed-images:
    get:
      summary: List processed images or find specific image (Admin only)
      tags:
        - Admin
      description: Lists all files and directories in the processed-images blob container or finds a specific image and returns its URL with SAS token. Only accessible by admin users.
      security:
        - bearerAuth: []
      parameters:
        - name: prefix
          in: query
          description: Optional path prefix for listing files in a specific directory
          required: false
          schema:
            type: string
        - name: imageName
          in: query
          description: Image filename to search for across all directories or within a specific directory
          required: false
          schema:
            type: string
        - name: imageUrl
          in: query
          description: Optional URL path or folder structure to narrow the image search
          required: false
          schema:
            type: string
        - name: deviceId
          in: query
          description: Optional device ID to narrow the search when looking for an image
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Files and directories retrieved successfully, or specific image found
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      files:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: Full path and name of the file
                            size:
                              type: integer
                              description: Size of the file in bytes
                            last_modified:
                              type: string
                              format: date-time
                              description: Last modified date of the file
                            content_type:
                              type: string
                              description: MIME type of the file
                      directories:
                        type: array
                        items:
                          type: string
                          description: List of directory paths
                  - type: object
                    properties:
                      message:
                        type: string
                        description: Status message
                        example: "Image found"
                      imageUrl:
                        type: string
                        description: URL with SAS token for accessing the image
                        example: "https://cst8917finalstgacc.blob.core.windows.net/processed-images/4202/20250408T202259271867+0000_d48750d8-f067-4ac6-bdbc-2a8d6d22a12c_4202.jpeg?sv=2023-01-03&ss=b&srt=o&sp=r&se=2025-04-08T18%3A00%3A00Z&st=2025-04-08T17%3A00%3A00Z&spr=https&sig=XXXXX"
        '401':
          description: Unauthorized (missing or invalid token)
        '403':
          description: Forbidden (only admins can access this endpoint)
        '404':
          description: Image not found (when searching for a specific image)
        '500':
          description: Internal server error

  /manage/transfer-device:
    post:
      summary: Transfer device between users (Admin only)
      tags:
        - Admin
      description: Transfers a device from one user to another. Only accessible by admin users.
      security:
        - bearerAuth: []
      parameters:
        - name: deviceId
          in: query
          required: true
          schema:
            type: string
          description: ID of the device to transfer
        - name: newUserId
          in: query
          required: true
          schema:
            type: string
          description: ID of the user to receive the device
      responses:
        '200':
          description: Device transferred successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  deviceId:
                    type: string
                    description: ID of the transferred device
                  oldUserId:
                    type: string
                    description: ID of the previous device owner
                  newUserId:
                    type: string
                    description: ID of the new device owner
        '400':
          description: Missing required parameters
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '403':
          description: Forbidden (only admins can access this endpoint)
        '404':
          description: Device or user not found
        '500':
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthToken:
      type: object
      properties:
        token:
          type: string
        expiryDate:
          type: string
          format: date-time

    User:
      type: object
      properties:
        userId:
          type: string
          description: MongoDB shard key (userId)
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
          description: Optional phone number
        authToken:
          $ref: '#/components/schemas/AuthToken'
        Devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'

    Device:
      type: object
      properties:
        deviceId:
          type: string
          description: Unique identifier for the device
        deviceName:
          type: string
          description: Name of the device
        sensorType:
          type: string
          description: Type of sensor (e.g., Temperature, Humidity)
        location:
          type: object
          properties:
            name:
              type: string
              description: Name of the location
            longitude:
              type: string
              description: Longitude of the location
            latitude:
              type: string
              description: Latitude of the location
        registrationDate:
          type: string
          format: date-time
          description: Date and time when the device was registered
        telemetryData:
          type: array
          items:
            $ref: '#/components/schemas/Telemetry'
        status:
          type: array
          description: List of device statuses
          items:
            type: object
            properties:
              valueType:
                type: string
                description: Type of the status (e.g., BatteryLevel, Active)
              value:
                type: string
                description: Status value (e.g., 85, on)

    Telemetry:
      type: object
      properties:
        eventId:
          type: string
          description: Unique identifier for the telemetry event
        deviceId:
          type: string
          description: Unique identifier for the device
        event_date:
          type: string
          format: date-time
          description: Date and time of the telemetry event
        values:
          type: array
          description: List of telemetry values
          items:
            type: object
            properties:
              valueType:
                type: string
                description: Type of the value (e.g., Temperature, Humidity)
              value:
                type: number
                description: Value of the telemetry data
              longitude:
                type: string
                description: Longitude of the location
              latitude:
                type: string
                description: Latitude of the location  

        image:
          type: string
          description: URL of the associated image (if any)

    Condition:
      type: object
      properties:
        conditionId:
          type: string
        userId:
          type: string
        deviceId:
          type: string
        valueType:
          type: string
        minValue:
          type: number
        maxValue:
          type: number
        exactValue:
          type: number
        unit:
          type: string
        scope:
          type: string
          enum:
            - general
            - user
            - device
          description: Scope of the condition (either `general` or `user` or `device`)
        notificationMethods:
          type: array
          items:
            type: string
            enum:
              - Log
              - Notification
              - Email
              - SMS

          description: List of notification methods to use when the condition is met

    AlertLog:
      type: object
      properties:
        _id:
          type: string
        deviceId:
          type: string
        message:
          type: string
        condition:
          type: object
          properties:
            _id:
              type: string
            type:
              type: string
            userId:
              type: string
            deviceId:
              type: string
              nullable: true
            valueType:
              type: string
            minValue:
              type: number
            maxValue:
              type: number
            exactValue:
              type: number
              nullable: true
            unit:
              type: string
            scope:
              type: string
            notificationMethods:
              type: array
              items:
                type: string
        user_id:
          type: string
        telemetry_data:
          type: array
          items:
            type: object
            properties:
              valueType:
                type: string
              value:
                type: number
              longitude:
                type: string
              latitude:
                type: string
        timestamp:
          type: string
          format: date-time

  SasAccessInfo:
    type: object
    properties:
      sasUrl:
        type: string
        description: |
            A time-limited secure URL (SAS token) for accessing the resized image without making the blob container public.
            This link usually expires after 1 hour and is auto-generated for the user after image resizing.
